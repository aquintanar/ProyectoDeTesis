// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User{
  
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  image String?
  email String? @unique
  emailVerified DateTime?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  favoriteIds String[] @db.ObjectId
  phone String?


  sessions Session[]
  accounts Account[]

  listings Listing[]
  reservations Reservation[]
}

model Account{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  user User @relation(fields: [userId],references:[id],onDelete : Cascade)
  @@unique([provider,providerAccountId])

}

model Listing{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String
  ImageSrc String
  createdAt DateTime @default(now())
  category String
  roomCount Int
  bathroomCount Int
  guestCount Int
  locationValue String
  userId String @db.ObjectId
  price Int

  user User @relation(fields: [userId],references:[id],onDelete : Cascade)
  reservation Reservation[]
}

model Reservation{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  listingId String @db.ObjectId
  startDate DateTime
  endDate DateTime
  totalPrice Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId],references:[id],onDelete : Cascade)
  listing Listing @relation(fields: [listingId],references:[id],onDelete : Cascade)

}


model Session{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String @unique
  userId String @db.ObjectId
  expires DateTime

  user User @relation(fields:[userId],references: [id], onDelete:Cascade)
}

model VerificationToken{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token String @unique
  expires DateTime

   @@unique([identifier,token])
}

model Movie{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String
  videoUrl String
  thumbnailUrl String
  genre String
  duration String
}

model Country{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  religion String
  language String
  currency String
  description String
  weather String
  continent String
  status String?
  flagUrl String

  provinces Province[]
}

model Province{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  economicactivity String
  surface Float
  population Int
  description String
  imageUrl String
  status String?
  country_id String @db.ObjectId

  
  country Country @relation(fields: [country_id],references:[id],onDelete : Cascade)
  cities City[]
}


model City{

  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  province_id String @db.ObjectId
  description String
  status String?
  imageUrl String

  province Province @relation(fields: [province_id],references:[id],onDelete : Cascade)
  opportunities Opportunity[]
}

model Company{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  sector String
  identification_type String
  identification_number String
  type_of_company String
  description String
  imageUrl String
  webSite String?
  status String?

  opportunities Opportunity[]
}
model Ability{
  id String @id @default(auto()) @map("_id") @db.ObjectId
 
  type String
  area_of_ability String
  description String
  imageUrl String
  status String?
  name String
}

model Document{
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name String
  type String
  description String
  imageUrl String
  status String?
}

model Proyect{
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name String
  ods String
  description String
  imageUrl String
  status String?
  Opportunity Opportunity[]

}

model Opportunity{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  type_opportunity String
  proyect_id String? @db.ObjectId
  company_id String @db.ObjectId
  city_id String @db.ObjectId
  description String
  start_date String
  end_date String
  start_time String
  end_time String
  acivities String
  price Float
  payment Float
  english_level String
  status String?
  imageUrl String

  proyect Proyect? @relation(fields: [proyect_id],references:[id],onDelete : Cascade)
  company Company @relation(fields: [company_id],references:[id],onDelete : Cascade)
  city City @relation(fields: [city_id],references:[id],onDelete : Cascade)

}